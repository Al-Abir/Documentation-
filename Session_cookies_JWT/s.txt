ржЯрзЛржХрзЗржи ржПржмржВ ржХрзБржХрж┐ржЬ ржХрзАржнрж╛ржмрзЗ ржХрж╛ржЬ ржХрж░рзЗ? (Token & Cookies Explained in Bengali)
JWT (JSON Web Token) ржХрзА?
JWT рж╣рж▓ ржПржХржЯрж┐ ржЯрзЛржХрзЗржи ржпрж╛ ржЗржЙржЬрж╛рж░ржХрзЗ ржЕржерзЗржиржЯрж┐ржХрзЗржЯ ржХрж░рж╛рж░ ржЬржирзНржп ржмрзНржпржмрж╣рзГржд рж╣ржпрж╝ред ржПржЯрж┐ рждрж┐ржиржЯрж┐ ржЕржВрж╢ ржирж┐ржпрж╝рзЗ ржЧржарж┐ржд:
Header тАУ ржПржЯрж┐ ржПрж▓ржЧрж░рж┐ржжржо ржУ ржЯрж╛ржЗржк рж╕ржВржХрзНрж░рж╛ржирзНржд рждржерзНржп рж░рж╛ржЦрзЗред
Payload тАУ ржПржЦрж╛ржирзЗ ржЗржЙржЬрж╛рж░рзЗрж░ рждржерзНржп (ржпрзЗржоржи: id, email ржЗрждрзНржпрж╛ржжрж┐) ржерж╛ржХрзЗред
Signature тАУ ржПржЯрж┐ Secret Key ржжрж┐ржпрж╝рзЗ ржПржиржХрзНрж░рж┐ржкрзНржЯ ржХрж░рж╛ рж╣ржпрж╝ ржпрж╛рждрзЗ ржЕржирзНржп ржХрзЗржЙ ржПржЯрж┐ ржкрж░рж┐ржмрж░рзНрждржи ржХрж░рждрзЗ ржирж╛ ржкрж╛рж░рзЗред
ржХрзБржХрж┐ржЬ (Cookies) ржХрзА?
Cookies рж╣рж▓рзЛ ржПржХржЯрж┐ ржЫрзЛржЯ ржбрзЗржЯрж╛ ржлрж╛ржЗрж▓ ржпрж╛ ржмрзНрж░рж╛ржЙржЬрж╛рж░ ржЗржЙржЬрж╛рж░рзЗрж░ ржХржорзНржкрж┐ржЙржЯрж╛рж░рзЗ рж╕ржВрж░ржХрзНрж╖ржг ржХрж░рзЗред ржПржЯрж┐ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ рж╕рж╛рж░рзНржнрж╛рж░ ржХрзНрж▓рж╛ржпрж╝рзЗржирзНржЯрзЗрж░ ржЕржмрж╕рзНржерж╛ ржЯрзНрж░рзНржпрж╛ржХ ржХрж░рждрзЗ ржкрж╛рж░рзЗред
ржХрзАржнрж╛ржмрзЗ ржХрж╛ржЬ ржХрж░рзЗ?
(рзз) ржЗржЙржЬрж╛рж░ рж░рзЗржЬрж┐рж╕рзНржЯрзНрж░рзЗрж╢ржи (User Registration)
ржЗржЙржЬрж╛рж░ рждрж╛рж░ ржирж╛ржо, ржЗржорзЗржЗрж▓ ржПржмржВ ржкрж╛рж╕ржУржпрж╝рж╛рж░рзНржб ржжрж┐ржпрж╝рзЗ рж░рзЗржЬрж┐рж╕рзНржЯрзНрж░рзЗрж╢ржи ржХрж░рж▓рзЗ,
ржкрж╛рж╕ржУржпрж╝рж╛рж░рзНржб bcrypt ржжрж┐ржпрж╝рзЗ ржПржиржХрзНрж░рж┐ржкрзНржЯ ржХрж░рзЗ ржбрж╛ржЯрж╛ржмрзЗржЬрзЗ рж╕ржВрж░ржХрзНрж╖ржг ржХрж░рж╛ рж╣ржпрж╝ред
(рзи) ржЗржЙржЬрж╛рж░ рж▓ржЧржЗржи (User Login) ржУ ржЯрзЛржХрзЗржи ржЬрзЗржирж╛рж░рзЗрж╢ржи
ржЗржЙржЬрж╛рж░ ржпржЦржи рж▓ржЧржЗржи ржХрж░рзЗ, рждржЦржи рждрж╛рж░ ржЗржорзЗржЗрж▓ ржПржмржВ ржкрж╛рж╕ржУржпрж╝рж╛рж░рзНржб ржпрж╛ржЪрж╛ржЗ ржХрж░рж╛ рж╣ржпрж╝ред
ржкрж╛рж╕ржУржпрж╝рж╛рж░рзНржб ржорж┐рж▓рж▓рзЗ, JWT ржЯрзЛржХрзЗржи рждрзИрж░рж┐ ржХрж░рж╛ рж╣ржпрж╝ред
ржЯрзЛржХрзЗржиржЯрж┐ Cookies ржПрж░ ржоржзрзНржпрзЗ httpOnly рж╣рж┐рж╕рзЗржмрзЗ рж╕ржВрж░ржХрзНрж╖ржг ржХрж░рж╛ рж╣ржпрж╝ ржпрж╛рждрзЗ ржПржЯрж┐ ржмрзНрж░рж╛ржЙржЬрж╛рж░ ржжрзНржмрж╛рж░рж╛ ржПржХрзНрж╕рзЗрж╕ ржХрж░рж╛ ржирж╛ ржпрж╛ржпрж╝ред

ржПржЗ ржЯрзЛржХрзЗржи рзз ржШржгрзНржЯрж╛рж░ ржЬржирзНржп ржмрзИржз ржерж╛ржХрзЗред
(рзй) ржЕржерзЗржиржЯрж┐ржХрзЗрж╢ржи ржЪрзЗржХ (Authentication Middleware)
ржпржЦржи ржЗржЙржЬрж╛рж░ ржХрзЛржирзЛ ржкрзНрж░ржЯрзЗржХрзНржЯрзЗржб рж░рзБржЯ (ржпрзЗржоржи /api/profile) ржЕрзНржпрж╛ржХрзНрж╕рзЗрж╕ ржХрж░рждрзЗ ржЪрж╛ржпрж╝, рждржЦржи ржорж┐ржбрж▓ржУржпрж╝рзНржпрж╛рж░ (authMiddleware) рждрж╛рж░ ржХрзБржХрж┐ ржерзЗржХрзЗ ржЯрзЛржХрзЗржи ржмрзЗрж░ ржХрж░рзЗред
ржпржжрж┐ ржЯрзЛржХрзЗржи рж╕ржарж┐ржХ ржерж╛ржХрзЗ, рждрж╛рж╣рж▓рзЗ ржЗржЙржЬрж╛рж░рзЗрж░ id ржмрзЗрж░ ржХрж░рзЗ ржкрж░ржмрж░рзНрждрзА ржзрж╛ржкрзЗ ржкрж╛ржарж╛ржирзЛ рж╣ржпрж╝ред
ржпржжрж┐ ржЯрзЛржХрзЗржи ржнрзБрж▓ рж╣ржпрж╝ ржмрж╛ ржПржХрзНрж╕ржкрж╛ржпрж╝рж╛рж░ рж╣ржпрж╝, рждрж╛рж╣рж▓рзЗ Unauthorized ржорзЗрж╕рзЗржЬ ржкрж╛ржарж╛ржирзЛ рж╣ржпрж╝ред
(рзк) рж▓ржЧржЖржЙржЯ ржУ ржХрзБржХрж┐ ржорзБржЫрзЗ ржлрзЗрж▓рж╛ (Logout & Clearing Cookies)
ржпржЦржи ржЗржЙржЬрж╛рж░ рж▓ржЧржЖржЙржЯ ржХрж░рзЗ, рждржЦржи ржХрзБржХрж┐ ржорзБржЫрзЗ ржлрзЗрж▓рж╛ рж╣ржпрж╝, ржпрж╛рждрзЗ ржЯрзЛржХрзЗржи ржЖрж░ ржмрзИржз ржирж╛ ржерж╛ржХрзЗред
рж╕ржВржХрзНрж╖рзЗржкрзЗ ржХрж╛ржЬрзЗрж░ ржзрж╛ржк:
1я╕ПтГг рж░рзЗржЬрж┐рж╕рзНржЯрзНрж░рзЗрж╢ржи: ржЗржЙржЬрж╛рж░ ржЗржиржлрзЛ ржУ ржкрж╛рж╕ржУржпрж╝рж╛рж░рзНржб ржбрж╛ржЯрж╛ржмрзЗржЬрзЗ рж╕ржВрж░ржХрзНрж╖ржгред
2я╕ПтГг рж▓ржЧржЗржи: ржЗржЙржЬрж╛рж░ ржЗржиржлрзЛ ржпрж╛ржЪрж╛ржЗ ржХрж░рзЗ ржЯрзЛржХрзЗржи рждрзИрж░рж┐ред
3я╕ПтГг ржХрзБржХрж┐рждрзЗ ржЯрзЛржХрзЗржи рж╕ржВрж░ржХрзНрж╖ржг: рж╕рж╛рж░рзНржнрж╛рж░ ржЯрзЛржХрзЗржи httpOnly Cookie рждрзЗ рж╕рзЗржЯ ржХрж░рзЗред
4я╕ПтГг ржорж┐ржбрж▓ржУржпрж╝рзНржпрж╛рж░ ржЕржерзЗржиржЯрж┐ржХрзЗрж╢ржи: ржкрзНрж░рждрж┐ржмрж╛рж░ ржЕржирзБрж░рзЛржзрзЗ ржХрзБржХрж┐ ржерзЗржХрзЗ ржЯрзЛржХрзЗржи ржпрж╛ржЪрж╛ржЗ ржХрж░рж╛ рж╣ржпрж╝ред
5я╕ПтГг ржЕрзНржпрж╛ржХрзНрж╕рзЗрж╕ ржХржирзНржЯрзНрж░рзЛрж▓: ржнрзБрж▓ ржЯрзЛржХрзЗржи рж╣рж▓рзЗ Unauthorized Access рж░рж┐ржЯрж╛рж░рзНржи ржХрж░рж╛ рж╣ржпрж╝ред
6я╕ПтГг рж▓ржЧржЖржЙржЯ: ржХрзБржХрж┐ ржорзБржЫрзЗ ржлрзЗрж▓рж╛ рж╣ржпрж╝, ржлрж▓рзЗ ржЯрзЛржХрзЗржи ржЖрж░ ржмрзИржз ржерж╛ржХрзЗ ржирж╛ред
ржПржнрж╛ржмрзЗ ржЯрзЛржХрзЗржи ржУ ржХрзБржХрж┐ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржЗржЙржЬрж╛рж░ ржЕржерзЗржиржЯрж┐ржХрзЗрж╢ржи ржХрж░рж╛ рж╣ржпрж╝, ржпрж╛рждрзЗ ржкрзНрж░рждрж┐ржмрж╛рж░ рж▓ржЧржЗржи ржХрж░рждрзЗ ржирж╛ рж╣ржпрж╝ ржХрж┐ржирзНрждрзБ рж╕рзБрж░ржХрзНрж╖рж╛ ржмржЬрж╛ржпрж╝ ржерж╛ржХрзЗред ЁЯЪА
You said:
token to priver header authoorization section why store token cookies secetion
ChatGPT said:
ржкрзНрж░рж╢рзНржи: ржЯрзЛржХрзЗржи рж╕рж╛ржзрж╛рж░ржгржд Authorization рж╣рзЗржбрж╛рж░рзЗ ржкрж╛ржарж╛ржирзЛ рж╣ржпрж╝, рждрж╛рж╣рж▓рзЗ ржХрзЗржи ржПржЯрж┐ ржХрзБржХрж┐рждрзЗ рж╕ржВрж░ржХрзНрж╖ржг ржХрж░рж╛ рж╣ржпрж╝?
ржПржЯрж┐ ржирж┐рж░рзНржнрж░ ржХрж░рзЗ рж╕рж┐ржХрж┐ржЙрж░рж┐ржЯрж┐ ржПржмржВ ржмрзНржпржмрж╣рж╛рж░ржпрзЛржЧрзНржпрждрж╛-ржПрж░ ржУржкрж░ред ржжрзБржЗ ржзрж░ржирзЗрж░ ржкржжрзНржзрждрж┐ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ ржпрж╛ржпрж╝:

(рзз) Authorization рж╣рзЗржбрж╛рж░рзЗ ржЯрзЛржХрзЗржи ржкрж╛ржарж╛ржирзЛ (Bearer Token)
ржПржЯрж┐ ржХрзНрж▓рж╛ржпрж╝рзЗржирзНржЯ (ржлрзНрж░ржирзНржЯржПржирзНржб) ржерзЗржХрзЗ Authorization рж╣рзЗржбрж╛рж░рзЗ Bearer ржЯрзЛржХрзЗржи рж╣рж┐рж╕рзЗржмрзЗ ржкрж╛ржарж╛ржирзЛ рж╣ржпрж╝ред
ЁЯФ╣ ржХрзАржнрж╛ржмрзЗ ржХрж╛ржЬ ржХрж░рзЗ?
ржЗржЙржЬрж╛рж░ рж▓ржЧржЗржи ржХрж░рж▓рзЗ рж╕рж╛рж░рзНржнрж╛рж░ рждрж╛ржХрзЗ ржПржХржЯрж┐ JWT ржЯрзЛржХрзЗржи ржкрзНрж░ржжрж╛ржи ржХрж░рзЗред
ржПрж░ржкрж░ ржХрзНрж▓рж╛ржпрж╝рзЗржирзНржЯ (ржлрзНрж░ржирзНржЯржПржирзНржб) ржкрзНрж░рждрж┐ржЯрж┐ ржЕржирзБрж░рзЛржзрзЗрж░ рж╣рзЗржбрж╛рж░рзЗ ржЯрзЛржХрзЗржи рж╕ржВржпрзБржХрзНржд ржХрж░рзЗ:
http
CopyEdit
Authorization: Bearer <JWT_TOKEN>


рж╕рж╛рж░рзНржнрж╛рж░ рж╣рзЗржбрж╛рж░ ржерзЗржХрзЗ ржЯрзЛржХрзЗржи ржмрзЗрж░ ржХрж░рзЗ ржпрж╛ржЪрж╛ржЗ ржХрж░ржмрзЗ ржПржмржВ ржЕржирзБржорждрж┐ ржжрзЗржмрзЗред
ЁЯФ╣ рж╕рзБржмрж┐ржзрж╛:
тЬЕ рж╕рж╣ржЬрзЗ ржмрзНржпржмрж╣рж╛рж░ржпрзЛржЧрзНржп, ржмрж┐рж╢рзЗрж╖ ржХрж░рзЗ REST API ржПрж░ ржЬржирзНржпред
тЬЕ ржЯрзЛржХрзЗржи рж╕рж╛рж░рзНржнрж╛рж░рж▓рзЗрж╕ ржмрж╛ ржорж╛рж▓рзНржЯрж┐ржкрж▓ ржбрзЛржорзЗржЗржи ржП ржХрж╛ржЬ ржХрж░рждрзЗ ржкрж╛рж░рзЗред
ЁЯФ╣ ржЕрж╕рзБржмрж┐ржзрж╛:
тЭМ XSS (Cross-Site Scripting) ржЖржХрзНрж░ржоржг рж╣рж▓рзЗ ржЯрзЛржХрзЗржи ржЪрзБрж░рж┐ рж╣рждрзЗ ржкрж╛рж░рзЗред
тЭМ ржкрзНрж░рждрж┐ржмрж╛рж░ ржХрзНрж▓рж╛ржпрж╝рзЗржирзНржЯржХрзЗ ржЯрзЛржХрзЗржи рж╕ржВржпрзБржХрзНржд ржХрж░рждрзЗ рж╣ржпрж╝, ржпрж╛ ржЭрж╛ржорзЗрж▓рж╛ рж╣рждрзЗ ржкрж╛рж░рзЗред

(рзи) ржХрзБржХрж┐рждрзЗ ржЯрзЛржХрзЗржи рж╕ржВрж░ржХрзНрж╖ржг ржХрж░рж╛ (httpOnly Cookie)
ржПржЦрж╛ржирзЗ ржЯрзЛржХрзЗржи ржХрзНрж▓рж╛ржпрж╝рзЗржирзНржЯрзЗрж░ рж╕рзНржЯрзЛрж░рзЗржЬрзЗ ржирж╛ рж░рзЗржЦрзЗ ржХрзБржХрж┐рждрзЗ рж╕ржВрж░ржХрзНрж╖ржг ржХрж░рж╛ рж╣ржпрж╝ред
ЁЯФ╣ ржХрзАржнрж╛ржмрзЗ ржХрж╛ржЬ ржХрж░рзЗ?
ржЗржЙржЬрж╛рж░ рж▓ржЧржЗржи ржХрж░рж▓рзЗ, рж╕рж╛рж░рзНржнрж╛рж░ ржЯрзЛржХрзЗржиржЯрж┐ httpOnly ржХрзБржХрж┐рждрзЗ рж╕рзЗржЯ ржХрж░рзЗ:
js
CopyEdit
res.cookie('token', JWT_TOKEN, { httpOnly: true, secure: true, sameSite: 'Strict' });


ржкрзНрж░рждрж┐ржмрж╛рж░ рж░рж┐ржХрзЛржпрж╝рзЗрж╕рзНржЯ ржХрж░рж▓рзЗ ржмрзНрж░рж╛ржЙржЬрж╛рж░ рж╕рзНржмржпрж╝ржВржХрзНрж░рж┐ржпрж╝ржнрж╛ржмрзЗ ржХрзБржХрж┐ ржкрж╛ржарж┐ржпрж╝рзЗ ржжрзЗржпрж╝ред
ЁЯФ╣ рж╕рзБржмрж┐ржзрж╛:
тЬЕ XSS ржЖржХрзНрж░ржоржгрзЗ ржЯрзЛржХрзЗржи ржЪрзБрж░рж┐ рж╣ржУржпрж╝рж╛рж░ ржЭрзБржБржХрж┐ ржХржо, ржХрж╛рж░ржг httpOnly ржХрзБржХрж┐ JavaScript ржжрзНржмрж╛рж░рж╛ ржПржХрзНрж╕рзЗрж╕ржпрзЛржЧрзНржп ржиржпрж╝ред
тЬЕ ржХрзНрж▓рж╛ржпрж╝рзЗржирзНржЯржХрзЗ рж╣рзЗржбрж╛рж░рзЗ ржЯрзЛржХрзЗржи ржкрж╛ржарж╛рждрзЗ рж╣ржпрж╝ ржирж╛, ржмрзНрж░рж╛ржЙржЬрж╛рж░ рж╕рзНржмржпрж╝ржВржХрзНрж░рж┐ржпрж╝ржнрж╛ржмрзЗ ржкрж╛ржарж┐ржпрж╝рзЗ ржжрзЗржпрж╝ред
ЁЯФ╣ ржЕрж╕рзБржмрж┐ржзрж╛:
тЭМ CSRF (Cross-Site Request Forgery) ржЖржХрзНрж░ржоржгрзЗрж░ ржЭрзБржБржХрж┐ ржерж╛ржХрзЗ, рждржмрзЗ ржПржЯрж┐ CSRF ржЯрзЛржХрзЗржи ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржкрзНрж░рждрж┐рж░рзЛржз ржХрж░рж╛ ржпрж╛ржпрж╝ред
тЭМ httpOnly Cookie рж╢рзБржзрзБржорж╛рждрзНрж░ ржмрзНрж░рж╛ржЙржЬрж╛рж░-ржнрж┐рждрзНрждрж┐ржХ ржЕрзНржпрж╛ржкрзЗ ржХрж╛ржЬ ржХрж░рзЗ, ржорзЛржмрж╛ржЗрж▓ ржЕрзНржпрж╛ржкрзЗ рж╕ржарж┐ржХржнрж╛ржмрзЗ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ ржХржарж┐ржи рж╣рждрзЗ ржкрж╛рж░рзЗред

рждрж╛рж╣рж▓рзЗ ржХрзЛржиржЯрж╛ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ ржЙржЪрж┐ржд?
тЬЕ Single Page Application (SPA): httpOnly Cookie ржкржжрзНржзрждрж┐ ржирж┐рж░рж╛ржкржж, ржХрж╛рж░ржг ржПржЯрж┐ XSS ржЖржХрзНрж░ржоржг ржкрзНрж░рждрж┐рж░рзЛржз ржХрж░рзЗред
тЬЕ Public API ржмрж╛ ржорзЛржмрж╛ржЗрж▓ ржЕрзНржпрж╛ржк: Authorization рж╣рзЗржбрж╛рж░рзЗ ржЯрзЛржХрзЗржи ржкрж╛ржарж╛ржирзЛ ржнрж╛рж▓рзЛ, ржХрж╛рж░ржг ржПржЯрж┐ httpOnly Cookie ржПрж░ рж╕рзАржорж╛ржмржжрзНржзрждрж╛ ржПржбрж╝рж╛ржпрж╝ред
ЁЯУМ рж╕рж░рзНржмрзЛрждрзНрждржо рж╕ржорж╛ржзрж╛ржи:
1я╕ПтГг ржХрзБржХрж┐рждрзЗ httpOnly JWT Token ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи, ржпрж╛рждрзЗ ржПржЯрж┐ JavaScript ржжрзНржмрж╛рж░рж╛ ржЪрзБрж░рж┐ ржХрж░рж╛ ржирж╛ ржпрж╛ржпрж╝ред
2я╕ПтГг CSRF ржЖржХрзНрж░ржоржг рж░рзЛржз ржХрж░рждрзЗ CSRF ржЯрзЛржХрзЗржи ржмрж╛ SameSite: Strict ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржиред
3я╕ПтГг API-ржПрж░ ржЬржирзНржп Authorization рж╣рзЗржбрж╛рж░рзЗ ржЯрзЛржХрзЗржи ржкрж╛ржарж╛ржи, ржпржжрж┐ ржПржЯрж┐ httpOnly Cookie ржирж╛ рж╣ржпрж╝ред
тЮбя╕П рж╕ржВржХрзНрж╖рзЗржкрзЗ: ржХрзБржХрж┐-ржнрж┐рждрзНрждрж┐ржХ ржЕржерзЗржиржЯрж┐ржХрзЗрж╢ржи ржмрзНрж░рж╛ржЙржЬрж╛рж░рзЗ ржмрзЗрж╢рж┐ ржирж┐рж░рж╛ржкржж, ржЖрж░ Authorization рж╣рзЗржбрж╛рж░ API-ржнрж┐рждрзНрждрж┐ржХ ржЕржерзЗржиржЯрж┐ржХрзЗрж╢ржирзЗрж░ ржЬржирзНржп ржЙржкржпрзЛржЧрзАред ЁЯЪА


ржПржЗ рж▓рж╛ржЗржиржЯрж┐рж░ ржмрзНржпрж╛ржЦрзНржпрж╛:
ЁЯСЙ "ржЯрзЛржХрзЗржиржЯрж┐ Cookies ржПрж░ ржоржзрзНржпрзЗ httpOnly рж╣рж┐рж╕рзЗржмрзЗ рж╕ржВрж░ржХрзНрж╖ржг ржХрж░рж╛ рж╣ржпрж╝ ржпрж╛рждрзЗ ржПржЯрж┐ ржмрзНрж░рж╛ржЙржЬрж╛рж░ ржжрзНржмрж╛рж░рж╛ ржПржХрзНрж╕рзЗрж╕ ржХрж░рж╛ ржирж╛ ржпрж╛ржпрж╝ред"
ЁЯФ╣ ржХрзБржХрж┐ (Cookie) ржХрж┐?
ржХрзБржХрж┐ рж╣рж▓рзЛ ржмрзНрж░рж╛ржЙржЬрж╛рж░-ржнрж┐рждрзНрждрж┐ржХ рж╕рзНржЯрзЛрж░рзЗржЬ, ржпрзЗржЦрж╛ржирзЗ рж╕рж╛рж░рзНржнрж╛рж░ ржерзЗржХрзЗ ржХрзНрж▓рж╛ржпрж╝рзЗржирзНржЯрзЗрж░ (ржмрзНрж░рж╛ржЙржЬрж╛рж░) ржоржзрзНржпрзЗ ржЫрзЛржЯ ржЫрзЛржЯ ржбрзЗржЯрж╛ рж╕ржВрж░ржХрзНрж╖ржг ржХрж░рж╛ ржпрж╛ржпрж╝ред
ЁЯФ╣ JWT ржЯрзЛржХрзЗржи ржХрзЗржи ржХрзБржХрж┐рждрзЗ рж╕ржВрж░ржХрзНрж╖ржг ржХрж░рж╛ рж╣ржпрж╝?
рж╕рж╛ржзрж╛рж░ржгржд, JWT (JSON Web Token) ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржЕржерзЗржиржЯрж┐ржХрзЗрж╢ржи ржкрж░рж┐ржЪрж╛рж▓ржирж╛ ржХрж░рж╛ рж╣ржпрж╝ред ржПржЯрж┐ рж╕рж┐ржХрж┐ржЙрж░рж┐ржЯрж┐ ржЙржирзНржиржд ржХрж░рждрзЗ httpOnly ржХрзБржХрж┐рждрзЗ рж╕ржВрж░ржХрзНрж╖ржг ржХрж░рж╛ рж╣ржпрж╝, ржпрж╛рждрзЗ ржПржЯрж┐ JavaScript ржжрзНржмрж╛рж░рж╛ ржЪрзБрж░рж┐ ржХрж░рж╛ ржирж╛ ржпрж╛ржпрж╝ред

httpOnly ржХрзБржХрж┐ ржХрзА?
ЁЯФ╣ httpOnly ржХрзБржХрж┐ ржПржоржи ржПржХржЯрж┐ ржХрзБржХрж┐, ржпрж╛ рж╢рзБржзрзБржорж╛рждрзНрж░ рж╕рж╛рж░рзНржнрж╛рж░ ржжрзНржмрж╛рж░рж╛ ржкрж╛ржарж╛ржирзЛ ржмрж╛ ржкржбрж╝рж╛ ржпрж╛ржпрж╝ ржПржмржВ ржПржЯрж┐ JavaScript ржжрж┐рзЯрзЗ ржПржХрзНрж╕рзЗрж╕ ржХрж░рж╛ рж╕ржорзНржнржм ржиржпрж╝ред
ЁЯФ╣ ржПржЯрж┐ рж╕рж╛ржзрж╛рж░ржгржд XSS (Cross-Site Scripting) ржЖржХрзНрж░ржоржг ржерзЗржХрзЗ рж░ржХрзНрж╖рж╛ ржкрзЗрждрзЗ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ рж╣ржпрж╝ред
ржЙржжрж╛рж╣рж░ржг:
ржпржЦржи ржЗржЙржЬрж╛рж░ рж▓ржЧржЗржи ржХрж░ржмрзЗ, рждржЦржи рж╕рж╛рж░рзНржнрж╛рж░ ржЯрзЛржХрзЗржи рждрзИрж░рж┐ ржХрж░рзЗ httpOnly ржХрзБржХрж┐рждрзЗ рж╕рзЗржЯ ржХрж░ржмрзЗ:
js
CopyEdit
res.cookie('token', jwtToken, {
    httpOnly: true,  // JavaScript ржжрзНржмрж╛рж░рж╛ ржПржХрзНрж╕рзЗрж╕ ржХрж░рж╛ ржпрж╛ржмрзЗ ржирж╛
    secure: true,    // рж╢рзБржзрзБржорж╛рждрзНрж░ HTTPS ржПрж░ ржорж╛ржзрзНржпржорзЗ ржХрж╛ржЬ ржХрж░ржмрзЗ
    sameSite: 'Strict' // Cross-site ржЕржирзБрж░рзЛржз ржмрзНрж▓ржХ ржХрж░ржмрзЗ
});


ржХрзЗржи httpOnly ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ рж╣ржпрж╝?
тЬФ JavaScript ржжрж┐рзЯрзЗ ржЯрзЛржХрзЗржи ржЪрзБрж░рж┐ ржХрж░рж╛ ржпрж╛ржмрзЗ ржирж╛:
ЁЯСЙ ржпржжрж┐ httpOnly рж╕рзЗржЯ ржХрж░рж╛ ржирж╛ ржерж╛ржХрзЗ, рждрж╛рж╣рж▓рзЗ JavaScript ржжрж┐рзЯрзЗ рж╕рж╣ржЬрзЗржЗ ржХрзБржХрж┐ ржЪрзБрж░рж┐ ржХрж░рж╛ рж╕ржорзНржнржм:
js
CopyEdit
console.log(document.cookie); // ржпржжрж┐ httpOnly ржирж╛ ржерж╛ржХрзЗ, рждрж╛рж╣рж▓рзЗ ржЯрзЛржХрзЗржи ржжрзЗржЦрж╛ ржпрж╛ржмрзЗ

тЭМ ржХрж┐ржирзНрждрзБ httpOnly ржерж╛ржХрж▓рзЗ JavaScript ржерзЗржХрзЗ document.cookie ржжрзНржмрж╛рж░рж╛ ржПржЯрж┐ ржПржХрзНрж╕рзЗрж╕ ржХрж░рж╛ рж╕ржорзНржнржм ржиржпрж╝ред
тЬФ XSS ржЖржХрзНрж░ржоржг ржерзЗржХрзЗ рж╕рзБрж░ржХрзНрж╖рж╛:
ЁЯСЙ ржпржжрж┐ ржХрзЛржирзЛ ржорзНржпрж╛рж▓рж┐рж╢рж┐ржпрж╝рж╛рж╕ рж╕рзНржХрзНрж░рж┐ржкрзНржЯ ржУрзЯрзЗржмрж╕рж╛ржЗржЯрзЗ ржЗржиржЬрзЗржХрзНржЯ ржХрж░рж╛ рж╣ржпрж╝, рждрж╛рж╣рж▓рзЗ рж╕рзЗржЯрж┐ JavaScript ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ JWT ржЯрзЛржХрзЗржи ржЪрзБрж░рж┐ ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗ ржирж╛ред

ржЙржкрж╕ржВрж╣рж╛рж░:
ЁЯУМ ржЯрзЛржХрзЗржиржЯрж┐ httpOnly ржХрзБржХрж┐рждрзЗ рж╕ржВрж░ржХрзНрж╖ржг ржХрж░рж▓рзЗ ржПржЯрж┐ ржмрзНрж░рж╛ржЙржЬрж╛рж░ ржерзЗржХрзЗ JavaScript ржжрзНржмрж╛рж░рж╛ ржПржХрзНрж╕рзЗрж╕ ржХрж░рж╛ рж╕ржорзНржнржм рж╣ржпрж╝ ржирж╛, ржпрж╛ ржПржЯрж┐ржХрзЗ ржирж┐рж░рж╛ржкржж рж░рж╛ржЦрзЗ ржПржмржВ XSS ржЖржХрзНрж░ржоржг ржерзЗржХрзЗ рж░ржХрзНрж╖рж╛ ржХрж░рзЗред ЁЯЪА





import express from 'express';
import mongoose from 'mongoose';
import bcrypt from 'bcryptjs';
import jwt from 'jsonwebtoken';
import cookieParser from 'cookie-parser';
import dotenv from 'dotenv';

dotenv.config();

const app = express();
app.use(express.json());
app.use(cookieParser());

mongoose.connect(process.env.MONGO_URI, { useNewUrlParser: true, useUnifiedTopology: true })
    .then(() => console.log("MongoDB Connected"))
    .catch(err => console.log(err));

const userSchema = new mongoose.Schema({
    username: String,
    email: { type: String, unique: true },
    password: String
});

const User = mongoose.model('User', userSchema);

const generateToken = (user) => {
    return jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: '1h' });
};

const authMiddleware = (req, res, next) => {
    const token = req.cookies.token;
    if (!token) return res.status(401).json({ message: "Unauthorized" });

    jwt.verify(token, process.env.JWT_SECRET, (err, decoded) => {
        if (err) return res.status(403).json({ message: "Forbidden" });
        req.userId = decoded.id;
        next();
    });
};

// User Registration
app.post('/api/register', async (req, res) => {
    const { username, email, password } = req.body;
    const hashedPassword = await bcrypt.hash(password, 10);
    try {
        const user = await User.create({ username, email, password: hashedPassword });
        res.status(201).json({ message: "User registered successfully" });
    } catch (error) {
        res.status(400).json({ error: "User registration failed" });
    }
});

// User Login
app.post('/api/login', async (req, res) => {
    const { email, password } = req.body;
    const user = await User.findOne({ email });
    if (!user || !(await bcrypt.compare(password, user.password))) {
        return res.status(401).json({ message: "Invalid credentials" });
    }
    
    const token = generateToken(user);
    res.cookie('token', token, { httpOnly: true });
    res.json({ message: "Login successful" });
});

// Get Single User Profile
app.get('/api/profile', authMiddleware, async (req, res) => {
    const user = await User.findById(req.userId).select('-password');
    if (!user) return res.status(404).json({ message: "User not found" });
    res.json(user);
});

// Get All Users
app.get('/api/users', authMiddleware, async (req, res) => {
    const users = await User.find().select('-password');
    res.json(users);
});

// Update User Profile
app.put('/api/profile', authMiddleware, async (req, res) => {
    const { username, email } = req.body;
    const updatedUser = await User.findByIdAndUpdate(req.userId, { username, email }, { new: true });
    res.json(updatedUser);
});

// Delete User
app.delete('/api/profile', authMiddleware, async (req, res) => {
    await User.findByIdAndDelete(req.userId);
    res.json({ message: "User deleted successfully" });
});

const PORT = process.env.PORT || 5000;
app.listen(PORT, () => console.log(`Server running on port ${PORT}`));



